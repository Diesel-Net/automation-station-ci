name: Build & Deploy to Steam

on:
  workflow_call:
    inputs:
      runs-on:
        required: true
        type: string
      target-platforms:
        required: true
        type: string
      steam-branch:
        required: true
        type: string
    secrets:
      unity-email:
        required: true
      unity-password:
        required: true
      unity-license:
        required: true
      git-private-token:
        required: true
      steam-username:
        required: true
      steam-app-id:
        required: true
      steam-config-vdf:
        required: true

jobs:
  build:
    name: Build ${{ matrix.target-platform }}
    strategy:
      matrix:
        target-platform: ${{ fromJSON(inputs.target-platforms) }}
    runs-on: ${{ inputs.runs-on }}
    outputs:
      buildVersion: ${{ steps.build.outputs.buildVersion }}
    steps:
      # Checkout
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          lfs: true

      # Cache
      - name: Cache for Library folder
        id: library-cache
        uses: Diesel-Net/action-local-cache@1.0.0
        with:
          path: Library
          key: Library-${{ github.event.repository.name }}-${{ matrix.target-platform }}

      # Build
      - name: Build project
        id: build
        uses: game-ci/unity-builder@v2
        env:
          UNITY_LICENSE: ${{ secrets.unity-license }}
          UNITY_EMAIL: ${{ secrets.unity-email }}
          UNITY_PASSWORD: ${{ secrets.unity-password }}
        with:
          targetPlatform: ${{ matrix.target-platform }}
          gitPrivateToken: ${{ secrets.git-private-token }}
          versioning: Semantic

      # Deploy
  deploy:
    name: Steam Deploy
    needs: [build]
    runs-on: ${{ inputs.runs-on }}
    steps:
      - name: Deploy to Steam
        uses: Diesel-Net/steam-deploy@main # TODO: switch this to a tag version
        with:
          username: ${{ secrets.steam-username }}
          configVdf: ${{ secrets.steam-config-vdf}}
          appId: ${{ secrets.steam-app-id }}
          buildDescription: v${{ needs.build.outputs.buildVersion }}
          rootPath: build
          depotPaths: ${{  join(fromJSON(inputs.target-platforms), ',') }}
          releaseBranch: ${{ inputs.steam-branch }}
