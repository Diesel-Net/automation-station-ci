- hosts: localhost
  gather_facts: yes
  connection: local
  tasks:
    
    - name: boot win11 host
      # proxmox_kvm:
      #   vmid: '{{ proxmox_vm_id }}'
      #   name: '{{ proxmox_vm_name }}'
      #   api_user: '{{ proxmox_user }}'
      #   api_password: '{{ proxmox_api_password }}'
      #   api_host: '{{ proxmox_api_host }}'
      #   node: pve
      #   state: started
      debug:
        msg: 'hello world'
      when: inventory_dir | basename == 'development'

- hosts: manager
  roles:
    - common

  tasks:

    - include_role:
        name: common
        tasks_from: make_config_dir


    - include_role:
        name: common
        tasks_from: make_data_dir


    - include_role:
        name: common
        tasks_from: make_docker_dir
    

    - name: 'git clone modulocity/automation-station to {{ config_dir }}/automation-station'
      git:
        repo: 'https://{{ git_clone_pat }}@github.com/modulocity/automation-station.git'
        dest: '{{ config_dir }}/automation-station'
        depth: 1
        version: development
        accept_hostkey: yes
        update: yes
        #force: yes


    - name: 'git clone game-ci/docker {{ config_dir }}/game-ci'
      git:
        repo: 'https://github.com/game-ci/docker.git'
        dest: '{{ config_dir }}/game-ci'
        depth: 1
        version: main
        accept_hostkey: yes
        update: yes


    - name: fetch the ProjectVersion.txt file
      fetch:
        src: '{{ config_dir }}/automation-station/ProjectSettings/ProjectVersion.txt'
        dest: '{{ playbook_dir }}/../'
        flat: yes


    - name: load variables from ProjectVersion.txt
      set_fact:
        project_version: "{{ lookup('file', playbook_dir+'/../ProjectVersion.txt').splitlines() }}"
    - debug:
        msg: '{{ project_version }}'


    - name: extract version and changeset
      set_fact:
        unity_version: "{{ project_version[0] | regex_search('^m_EditorVersion:\\s(.*)$', '\\1') | first }}"
        unity_changeset: "{{ project_version[1] | regex_search('^m_EditorVersionWithRevision:\\s(.*)\\s\\((.*)\\)$', '\\2') | first }}"

    - debug:
        msg: "unity_version: {{ unity_version }}"
    - debug:
        msg: "unity_changeset: {{ unity_changeset }}"


    - name: install docker python package on remote host
      pip:
        name: docker
        state: latest


    - name: 'docker login ({{ docker_registry }})'
      docker_login:
        registry_url: '{{ docker_registry }}'
        username: '{{ docker_registry_username }}'
        password: '{{ docker_registry_password }}'


    - name: docker build unity editor
      docker_image:
        build:
          pull: yes
          path: '{{ config_dir }}/game-ci'
          dockerfile: images/ubuntu/editor/Dockerfile
          args:
            version: '{{ unity_version }}'
            changeSet: '{{ unity_changeset }}'
            module: '{{ unity_module }}'
        source: build
        name: '{{ docker_registry }}/unity-editor:{{ unity_version }}-{{ unity_module }}'
        push: yes


    - name: 'copy Unity license to {{ docker_dir }}/UnityLicense.ulf'
      copy:
        content: '{{ unity_ulf }}'
        dest: '{{ docker_dir }}/UnityLicense.ulf'


    - name: 'copy activate.Dockerfile {{ docker_dir }}/Dockerfile'
      copy:
        src: '{{ playbook_dir }}/../activate.Dockerfile'
        dest: '{{ docker_dir }}/Dockerfile'


    - name: 'copy activate.sh {{ docker_dir }}/activate.sh'
      copy:
        src: '{{ playbook_dir }}/../activate.sh'
        dest: '{{ docker_dir }}/activate.sh'


    - name: 'docker build ACTIVATED unity editor'
      docker_image:
        build:
          pull: yes
          path: '{{ docker_dir }}'
          args:
            editor_image: '{{ docker_registry }}/unity-editor:{{ unity_version }}-{{ unity_module }}'
            license_file: 'UnityLicense.ulf'
        source: build
        name: '{{ docker_registry }}/activated-unity-editor:{{ unity_version }}-{{ unity_module }}'
        push: no


    - name: 'building game files'
      register: build_output
      shell: >
        docker run
        --name automation-station-build-{{ drone_build_number }}
        -v {{ config_dir }}/automation-station:/automation-station
        docker.nexus.diesel.net/activated-unity-editor:{{ unity_version }}-{{ unity_module }}
        unity-editor 
        -quit 
        -projectPath /automation-station 
        -buildTarget Win64 
        -executeMethod BuildRunner.BuildWindowsMonoDebug 
        -logFile -
    - debug:
        msg: '{{ build_output.stdout_lines }}'


    - name: 'package and upload game to itch.io'
      shell: >
        docker run
        -v {{ config_dir }}/automation-station/Builds/windows-mono-debug:/build
        -e BUTLER_API_KEY={{ butler_api_key }} 
        dosowisko/butler:latest 
        butler push /build gravitonpunch/automation-station:windows-mono-debug-alpha
      register: butler_output

    - debug:
        msg: '{{ butler_output.stdout_lines }}'

- hosts: localhost
  gather_facts: no
  connection: local
  tasks:

    - name: poweroff win11 host
      proxmox_kvm:
        vmid: '{{ proxmox_vm_id }}'
        name: '{{ proxmox_vm_name }}'
        api_user: '{{ proxmox_user }}'
        api_password: '{{ proxmox_api_password }}'
        api_host: '{{ proxmox_api_host }}'
        node: pve
        state: stopped
      when: inventory_dir | basename == 'stable'
