- hosts: manager
  gather_facts: no
  roles:
    - common

  tasks:

    - name: wait for host to become reachable
      wait_for_connection:
        timeout: 600

    - name:
      gather_facts:

    - include_role:
        name: common
        tasks_from: make_config_dir

    - include_role:
        name: common
        tasks_from: make_data_dir

    - include_role:
        name: common
        tasks_from: make_docker_dir
    

    - name: 'git clone modulocity/automation-station to {{ config_dir }}/automation-station'
      git:
        repo: 'https://{{ git_clone_pat }}@github.com/modulocity/automation-station.git'
        dest: '{{ config_dir }}/automation-station'
        depth: 1
        version: development
        accept_hostkey: yes
        update: yes
        force: yes


    - name: 'git clone game-ci/docker {{ config_dir }}/game-ci'
      git:
        repo: 'https://github.com/game-ci/docker.git'
        dest: '{{ config_dir }}/game-ci'
        depth: 1
        version: main
        accept_hostkey: yes
        update: yes


    - name: fetch the ProjectVersion.txt file
      fetch:
        src: '{{ config_dir }}/automation-station/ProjectSettings/ProjectVersion.txt'
        dest: '{{ playbook_dir }}/../'
        flat: yes


    - name: load variables from ProjectVersion.txt
      set_fact:
        project_version: "{{ lookup('file', playbook_dir+'/../ProjectVersion.txt').splitlines() }}"
    - debug:
        msg: '{{ project_version }}'


    - name: extract version and changeset
      set_fact:
        unity_version: "{{ project_version[0] | regex_search('^m_EditorVersion:\\s(.*)$', '\\1') | first }}"
        unity_changeset: "{{ project_version[1] | regex_search('^m_EditorVersionWithRevision:\\s(.*)\\s\\((.*)\\)$', '\\2') | first }}"
    - debug:
        msg: "unity_version: {{ unity_version }}"
    - debug:
        msg: "unity_changeset: {{ unity_changeset }}"


    - name: 'docker login {{ docker_registry }}'
      shell: >
        docker login {{ docker_registry }}
        --username '{{ docker_registry_username }}'
        --password '{{ docker_registry_password }}'


    - name: 'docker pull {{ docker_registry }}/unity-editor:{{ unity_version }}-{{ unity_module }}'
      shell: >
        docker pull {{ docker_registry }}/unity-editor:{{ unity_version }}-{{ unity_module }}
      register: docker_pull
      ignore_errors: yes


    - name: docker build unity editor
      register: build_output
      shell: >
        docker build
        --pull
        -f {{ config_dir }}/game-ci/images/ubuntu/editor/Dockerfile
        -t {{ docker_registry }}/unity-editor:{{ unity_version }}-{{ unity_module }}
        --build-arg version={{ unity_version }}
        --build-arg changeSet={{ unity_changeset }}
        --build-arg module={{ unity_module }}
        {{ config_dir }}/game-ci
      when: docker_pull.rc > 0
    - debug:
        msg: '{{ build_output.stdout_lines }}'
      when: docker_pull.rc > 0


    - name: docker push unity editor
      register: push_output
      shell: >
        docker push
        {{ docker_registry }}/unity-editor:{{ unity_version }}-{{ unity_module }}
    - debug:
        msg: '{{ push_output.stdout_lines }}'


    - name: 'copy Unity license to {{ docker_dir }}/UnityLicense.ulf'
      copy:
        content: '{{ unity_ulf }}'
        dest: '{{ docker_dir }}/UnityLicense.ulf'


    - name: 'copy activate.Dockerfile {{ docker_dir }}/Dockerfile'
      copy:
        src: '{{ playbook_dir }}/../activate.Dockerfile'
        dest: '{{ docker_dir }}/Dockerfile'


    - name: 'copy activate.sh {{ docker_dir }}/activate.sh'
      copy:
        src: '{{ playbook_dir }}/../activate.sh'
        dest: '{{ docker_dir }}/activate.sh'
        

    - name: 'docker build ACTIVATED unity editor'
      register: build_output
      shell: >
        docker build
        --pull
        -f {{ docker_dir }}/Dockerfile
        -t {{ docker_registry }}/activated-unity-editor:{{ unity_version }}-{{ unity_module }}
        --build-arg editor_image={{ docker_registry }}/unity-editor:{{ unity_version }}-{{ unity_module }}
        --build-arg license_file=UnityLicense.ulf
        {{ docker_dir }}
    - debug:
        msg: '{{ build_output.stdout_lines }}'


    - name: 'build game files'
      block:
        - name: 'perform build'
          register: build_output
          shell: >
            docker run
            --name automation-station-build-{{ drone_build_number }}
            -v {{ config_dir }}/automation-station:/automation-station
            -v {{ data_dir }}/build-logs:/build-logs
            docker.nexus.diesel.net/activated-unity-editor:{{ unity_version }}-{{ unity_module }}
            unity-editor 
            -quit 
            -projectPath /automation-station 
            -buildTarget Win64 
            -executeMethod BuildRunner.BuildWindowsMonoRelease 
            -logFile /build-logs/build.log
        - debug:
            msg: '{{ build_output.stdout_lines }}'
      always:
        - name: 'fetch the build log from {{ data_dir }}/build-logs/build.log'
          fetch:
            src: '{{ data_dir }}/build-logs/build.log'
            dest: '{{ playbook_dir }}/../'
            flat: yes
        - name: load build log from build.log
          set_fact:
            build_log: "{{ lookup('file', playbook_dir+'/../build.log') }}"
        - debug:
            msg: '{{ build_log.splitlines() }}'
  

    - name: 'package and upload game to itch.io'
      shell: >
        docker run
        --pull always
        -v {{ config_dir }}/automation-station/Builds/windows-mono-release:/build
        -e BUTLER_API_KEY={{ butler_api_key }}
        dosowisko/butler:latest 
        butler push {{ butler_options | default('') }}
        /build gravitonpunch/automation-station:windows-mono-release-alpha
      register: butler_output
    - debug:
        msg: '{{ butler_output.stdout_lines }}'
